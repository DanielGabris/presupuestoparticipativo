:javascript
  google.load('visualization', '1', {language: '#{iso639_locale}'});

%h1
  =t '.header'
  %span=t '.period', starts_on: l(@starts_on, format: :short), ends_on: l(@ends_on, format: :long)
%p.attribution=t '.by', author: t('app.author_name'), organization: @questionnaire.organization.name

.blocks.clearfix
  - if @statistics[:visitors]
    .block.block-small
      .number
        = number_with_delimiter @statistics[:visitors]
      .title
        =t 'statistics.visitors'

  .block.block-small
    .number
      = number_with_delimiter @number_of_responses
    .title
      =t 'statistics.responses'
    .subtitle
      =t 'statistics.participation_rate', percentage: number_to_percentage(@number_of_responses / @statistics[:visitors].to_f * 100)

  .block.block-large
    .number
      = distance_of_time_in_words @questionnaire.time_to_complete
    .title
      =t 'statistics.time_to_complete'
    .subtitle
      &nbsp;

- if @charts[:responses]
  .columns.clearfix
    .column.offset
      %div(id="responses" style="width:600px;height:250px;")
- if @charts[:visits]
  .columns.clearfix
    .column.offset
      %div(id="visits" style="width:600px;height:250px;")
- if @charts[:sources]
  .columns.clearfix
    .column.offset
      %div(id="sources" style="width:600px;height:300px;")

%h2=t '.summary'

%h3=t '.detail.header'

- i = 0
- @questionnaire.sections.simulator.each do |section|
  - if section.questions.any?{|q| q.budgetary? || q.options?}
    %h4= section.title

    - section.questions.each do |q|
      - if q.budgetary?
        -# @todo The proportion of participants who must be in favor of a change for
        -#   it to be significant depends on the sample size.
        %div(class="question #{@details[q.id.to_s][:percentage_of_population] >= 0.55 ? 'stress' : 'subdue'}")
          %h5
            %span= i += 1
            = q.title
          %p
            - if q.widget == 'scaler'
              =t('.detail.choice', choice: number_to_percentage(@details[q.id.to_s][:mean_choice] * 100)).html_safe
            - elsif q.widget == 'slider' && q.options.size > 2
              -# @todo Figure out where ActiveAdmin puts its helpers.
              =t(".detail.choice_and_impact.#{q.revenue? ? 'revenue' : 'expense'}.#{@details[q.id.to_s][:mean_impact] >= 0 ? :positive : :negative}", choice: number_with_precision(@details[q.id.to_s][:mean_choice], precision: 1), impact: number_to_currency(@details[q.id.to_s][:mean_impact].abs)).html_safe
              - unless [q.maximum_units, q.minimum_units].include?(q.cast_default_value)
                =t '.detail.bidirectional', proportion_who_decrease: number_to_percentage(@details[q.id.to_s][:proportion_who_decrease] * 100, precision: 0), mean_decrease: number_with_precision(@details[q.id.to_s][:mean_decrease], precision: 1), proportion_who_increase: number_to_percentage(@details[q.id.to_s][:proportion_who_increase] * 100, precision: 0), mean_increase: number_with_precision(@details[q.id.to_s][:mean_increase], precision: 1)
            - elsif q.widget == 'slider' && q.options.size == 2 || q.widget == 'onoff'
              %strong= number_to_percentage @details[q.id.to_s][:percentage_of_population] * 100
              =t(".detail.widget.onoff.#{q.revenue? ? 'revenue' : 'expense'}.#{@details[q.id.to_s][:mean_impact] >= 0 ? :positive : :negative}", minimum_amount: number_to_currency(q.minimum_amount.abs), maximum_amount: number_to_currency(q.maximum_amount.abs)).html_safe
            - elsif q.widget == 'option'
              %table
                - @details[q.id.to_s][:counts].each do |option,count|
                  %tr
                    %td= number_to_percentage count * 100, precision: 0
                    %th
                      :markdown
                        #{q.labels[q.options.index(option)]}
      - elsif q.options?
        %div.question.stress
          %h5
            %span= i += 1
            = q.title
          - if q.description?
            %p
              %i
                =t :left_quote
                = strip_tags(RDiscount.new(q.description).to_html)
                =t :right_quote
          %p
            %strong= number_to_percentage @details[q.id.to_s][:percentage_of_population] * 100
            =t '.detail.widget.nonbudgetary'
      - unless q.widget == 'textarea'
        .graph{:id => "graph_#{q.id}"}

-# Google Charts adds null values for missing dates in the time series.
-# https://developers.google.com/chart/interactive/docs/gallery/linechart
- if @charts[:responses]
  :javascript
    draw('LineChart', 'responses', [
      "#{t 'statistics.responses'}"
    ], [#{@charts[:responses]}], {
      chartArea: {
        left: 30,
        width: '85%'
      },
      gridlineColor: '#ffffff',
      hAxis: {
        baselineColor: '#ffffff',
        format: '#{t :icu_date_format}'
      },
      legend: {
        position: 'none'
      },
      title: "#{t 'statistics.responses_title'}"
    });
- if @charts[:visits]
  :javascript
    draw('LineChart', 'visits', [
      "#{t 'statistics.visitors'}",
      "#{t 'statistics.visits'}",
      "#{t 'statistics.pageviews'}"
    ], [#{@charts[:visits]}], {
      chartArea: {
        left: 30,
        width: '85%'
      },
      gridlineColor: '#ffffff',
      hAxis: {
        baselineColor: '#ffffff',
        format: '#{t :icu_date_format}'
      },
      legend: {
        position: 'bottom'
      },
      title: "#{t 'statistics.visits_title', name: @statistics[:name], property: @statistics[:property]}"
    });
- if @charts[:sources]
  :javascript
    draw('PieChart', 'sources', [
      "#{t 'statistics.visitors'}"
    ], [#{@charts[:sources]}], {
      chartArea: {
        left: 0,
        width: '100%'
      },
      gridlineColor: '#ffffff',
      pieResidueSliceLabel: "#{t 'statistics.other'}",
      sliceVisibilityThreshold: 1 / 180
    });
